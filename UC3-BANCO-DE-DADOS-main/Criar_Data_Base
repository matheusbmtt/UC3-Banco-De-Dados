

//Tipos de Dados Numéricos
INT: Números inteiros.
Ex; 1, 8, -10, 1000

//BIGNT: Números inteiros Maiores.
Ex: 1000000, -987426838, 9645634784453553

//VARCHAR: Qualquer caracterios, tem que Definir um LIMITE
EX: Nome VARCHAR(100) o nome pode ter até 100 caracterios!! 

//IGNORE INTO: Para não dar erro, quando eu for colocar outro valor dentro de uma TABELA já criada, ele evita que eu duplique o mesmo valor. 


// MODELO
-- CRIA O BANCO DE DADOS Loja_Tevinho SE NÃO EXISTIR
CREATE DATABASE IF NOT EXISTS Loja_Tevinho;

-- USE O BANCO DE DADOS Loja_Tevinho PARA OS COMANDOS ABAIXOS
USE Loja_Tevinho;

--  CRIE A TABELA clintes SE ELA JÁ NÃO EXISTIR
    CREATE TABLE IF NOT EXISTS CLIENTE (
    ID_Cliente INT PRIMARY KEY,
    Nome VARCHAR(100),
    Email VARCHAR(100)
    );
--  CRIE A TABELA clintes SE ELA JÁ NÃO EXISTIR
    CREATE TABLE IF NOT EXISTS PEDIDOS(
        ID_Pedido INT PRIMARY KEY,
        Descricao VARCHAR(200),
        Valor DECIMAL(10, 2),
        ID_Cliente INT,
        FOREIGN KEY(ID_Cliente) REFERENCES Clientes(ID_Cliente)
        );

-- INSERINDO VALORES NA TABELA Clientes COM INSERT IGNORE INTO 
-- INSIRA ESSES VALORES NA TABELA, MAS IGNORE VALORES QUE JÁ EXISTEM 
INSERT IGNORE INTO Clientes(ID_cliente, Nome,Email) VALUES
(1, ' Stevão Rodrigues', 'stevao@gmail.com'),
(2, 'Lucas FLorão', 'lucas@gmil.com'),
(3, 'Matheus Mattos', 'matheus@gmail.com'),
(4, 'Pedro Henrique', 'pedro@gmail.com');

-- INSERINDO VALORES NA TABELA Pedidos COM INSERT IGNORE INTO
-- INSIRA ESSES VALORES NA TABELA, MAS IGNORE VALORES QUE JÁ EXISTEM 
INSERT IGNORE INTO Pedidos(ID_Pedido, Descricao, Valor, ID_Cliente) VALUE
(101, 'Compra de Móveis', '1500,00', 1),
(102, 'Pedido de Eletrônicos', '2500,00', 2),
(103, 'Serviços de Instalações', '500,75',3),
(104, 'Iphone 13 Pro', '7000,00', 4);



--  CRIE A TABELA clintes SE ELA JÁ NÃO EXISTIR
    CREATE TABLE IF NOT EXISTS Produtos (
    ID_Produto INT PRIMARY KEY,
    Nome_Do_Produto VARCHAR(100),
    preco_Unitario REAL(100)
    );

--  CRIE A TABELA clintes SE ELA JÁ NÃO EXISTIR
    CREATE TABLE IF NOT EXISTS Itens (
    ID_Item INT PRIMARY KEY,
    ID_Pedido INT,
    FOREIGN KEY(ID_Pedido) REFERENCES Pedidos(ID_Pedido),
    ID_Produto INT,
    FOREIGN KEY(ID_Produto) REFERENCES Produtos(ID_Produto),
    Quantidade int,
    Preco_unitario varchar(10000)
);

--  CRIE A TABELA clintes SE ELA JÁ NÃO EXISTIR
    CREATE TABLE IF NOT EXISTS Pagamentos (
    ID_Pagamento INT PRIMARY KEY,
    Pagamento int,
    Metodo_Do_Pagamento VARCHAR (50),
    Valor_Do_Pagamento Real,
    Data_De_Pagamanto DATE
);


// Ferramentas Para Mudar ou Atualizar as Tabelas:

-- Alterar o nome de uma tabela: RENAME TABLE nome_antigo TO nome_novo;

RENAME TABLE clientes TO lojaClientes;

-- Alterar o nome de uma coluna: ALTER TABLE nome_da_tabela CHANGE nome_antigo nome_novo tipo_da_coluna;

ALTER TABLE lojaClientes CHANGE Nome Nomes VARCHAR(100);

-- Inserir mais colunas em uma tabela: ALTER TABLE nome_da_tabela ADD COLUMN nome_da_coluna tipo_da_coluna;

ALTER TABLE clientes ADD COLUMN Telefone VARCHAR(15);

-- Inserir valores nas novas colunas criadas: UPDATE nome_da_tabela SET nome_da_coluna = valor WHERE condicao;

UPDATE Clientes SET Telefone = 5199999999 WHERE id_cliente = 1;

===============================================//=========================================================
CRIAR A TABELA:
CREATE TABLE clientes (
    -- coluna / tipo de dado / restrição
    idClientes INT PRIMARY KEY,
    nome VARCHAR (100),
    telefone VARCHAR(100)
    );
===============================================//=========================================================
ADICIONAR COLUNA A TABELA:
ALTER TABLE clientes
ADD email VARCHAR(100);
===============================================//=========================================================
MODIFICAR A COLUNA DA TABELA:
ALTER TABLE clientes
MODIFY email TEXT;
===============================================//=========================================================
MUDAR O NOME DA COLUNA NA TABELA:
ALTER TABLE clientes
CHANGE COLUMN email emailCliente VARCHAR(255);
===============================================//=========================================================
REMOVER COLUNA NA TABELA:
ALTER TABLE clientes
DROP COLUMN telefone VARCHAR(100);
===============================================//=========================================================
DELETAR UMA TABELA:
DROP TABLE clientes;
===============================================//=========================================================
COMO INSERIR DADOS NA TABELA:
INSERT INTO clientes (idClientes, nome, emailClientes)
VALUES (1, 'João Silva', 'joao.silva@email.com');
===============================================//=========================================================
COMO ATUALIZAR DADOS DA TABELA
UPDATE clientes
SET emailCliente = 'novo.email@email.com'
WHERE idClientes = 1; -- condição
===============================================//=========================================================
COMO DELETAR DADOS NA TABELA
DELETE FROM clientes
WHERE idClientes = 1
===============================================//=========================================================
CONSULTA SIMPLES: RETORNA TODOS OS DADOS DA TABELA:
SELECT idClientes, nome, emailCliente
FROM clientes;

SELECT *
FROM clientes;
===============================================//=========================================================
SELECT * FROM clientes;
===============================================//=========================================================
SELECT emailCliente
FROM clientes
WHERE idClientes = 3;
===============================================//=========================================================
SELECT emailCliente FROM clientes WHERE idClientes IN  (3, 4, 5);
===============================================//=========================================================
CONSULTA COM ORDENAÇÃO: RETORNA DADOS ORDENADOS:
SELECT idClientes, nome, emailCliente
FROM clientes
ORDER BY nome ASC; -- OU DESC
===============================================//=========================================================
CONSULTA COM FILTRO E COM ORDENAÇÃO: RETORNA DADOS ORDENADOS E COM BASE EM UMA CONDIÇÃO
SELECT nome
FROM clientes
WHERE emailCliente = 'joao.silva@email.com'
ORDER BY idClientes DESC;
===============================================//=========================================================
CONSULTA COM LIMITE DE RESULTADOS:
SELECT idClientes, nome, emailCliente
FROM clientes
LIMIT 3;
===============================================//=========================================================
CONSULTA DE VALORES ÚNICOS:
SELECT DISTINCT emailCliente
FROM clientes;
===============================================//=========================================================
CREATE TABLE pedidos (
idPedido INT AUTO_INCREMENT PRIMARY KEY,
idCliente INT,
numeroPedido VARCHAR(50),
valorTotal DECIMAL(10, 2),
dataPedido DATE,
FOREIGN KEY (idClientes) REFERENCES clientes(idClientes)
);
===============================================//=========================================================
INSERT INTO pedidos (idCliente, numeroPedido, valorTotal, dataPedido)
VALUES (1, 'PED-001', 150.00, '2024-07-12'),
       (2, 'PED-002', 250.00, '2024-07-12'),
       (1, 'PED-003', 180.00, '2024-07-13');
===============================================//=========================================================
SELECT SUM (valorTotal) AS valor_total_pedidos
FROM pedidos;
===============================================//=========================================================
SELECT AVG (valorTotal) AS valor_medio_pedidos
FROM pedidos;
===============================================//=========================================================
SELECT MAX(numeroPedido) AS pedido_com_numero_mais_alto
FROM pedidos;
===============================================//=========================================================
SELECT MIN(numeroPedido) AS pedido_com_numero_mais_baixo
FROM pedidos;
===============================================//=========================================================
SELECT clientes.idClientes, clientes.nome, clientes.emailCliente, pedidos.numeroPedido
FROM clientes
INNER JOIN pedidos ON clientes.idClientes = pedidos.idClientes;
===============================================//=========================================================
SELECT clientes.idClientes, clientes.nome, pedidos.numeroPedido
FROM clientes
LEFT JOIN pedidos ON clientes.idClientes = pedidos.idClientes;
===============================================//=========================================================
SELECT clientes.idClientes, clientes.nome, pedidos.numeroPedido
FROM clientes
LEFT JOIN pedidos ON clientes.idClientes = pedidos.idClientes;
===============================================//=========================================================
SELECT clientes.idClientes, cliente.nome, pedidos.numeroPedido, pedidos.valorTotal
FROM clientes
INNER JOIN pedidos ON clientes.idClientes = pedidos.idClientes
WHERE pedidos.valorTotal > 200;
===============================================//=========================================================
SELECT COUNT(*)
FROM pedidos;
===============================================//=========================================================
SELECT clientes.nome, COUNT(pedidos.idPedido) AS total_pedidos
FROM clientes INNER JOIN pedidos ON clientes.idClientes = pedidos.idClientes
GROUP BY clientes.nome
===============================================//=========================================================
SELECT clientes.nome, SUM(pedidos.valorTotal) AS valor_total
FROM clientes INNER JOIN pedidos ON clientes.idClientes = pedidos.idClientes
GROUP BY clientes.nome
===============================================//=========================================================
///////CREATE TABLE departamentos (
departamento_id INT AUTO_INCREMENT PRIMARY KEY,
nome VARCHAR(50) NOT NULL
);
===============================================//=========================================================
CREATE TABLE empregados (
empregados_id INT AUTO_INCREMENT PRIMARY KEY, 
nome VARCHAR(50) NOT NULL,
salario DECIMAL(10, 2) NOT NULL,
departamento_id INT,
FOREIGN KEY (departamento_id) REFERENCES departamentos
(departamento_id)
);
===============================================//=========================================================
INSERT INTO departamentos (nome) VALUES
('Vendas'),
('Marketing'),
('TI'),
('Recursos Humanos');
===============================================//=========================================================
INSERT INTO empregados (nome, salario, departamento_id) VALUES
('Maicou Diécson', 5000.00, 1),
('Neima Juniu', 6000.00, 1),
('Cristiano Penaldo', 4000.00, 2),
('Dalessandro', 5500.00, 3),
('Mattos', 7000.00, 3),
('Chicoins', 3000.00, 4),
('Lionel Pessi', 4500.00, 2),
('Biniciu Juniu', 3500.00, 1);
===============================================//=========================================================
SELECT nome, salario
FROM empregados
WHERE salario > (SELECT AVG(salario) FROM empregados);
===============================================//=========================================================
ALTER TABLE departamentos ADD localizacao VARCHAR(50);
===============================================//=========================================================
UPDATE departamentos SET localizacao = 'São Paulo' WHERE nome = 'Vendas';
UPDATE departamentos SET localizacao = 'Rio de Janeiro' WHERE nome = 'Marketing';
UPDATE departamentos SET localizacao = 'São Paulo' WHERE nome = 'TI';
UPDATE departamentos SET localizacao = 'Belo Horizonte' WHERE nome = 'Recursos Humanos';
===============================================//=========================================================
SELECT empregados.nome, departamentos.nome
FROM empregados
INNER JOIN departamentos
ON empregados.departamento_id = departamentos.departamento_id;
===============================================//=========================================================
SELECT nome
FROM empregados
WHERE departamento_id IN(SELECT departamento_id FROM departamentos WHERE localizacao = 'São Paulo');
===============================================//=========================================================
SELECT salario FROM empregados WHERE departamento_id = 
(SELECT departamento_id FROM departamentos WHERE nome = 'TI');
===============================================//=========================================================
SELECT nome, salario
FROM empregados
WHERE salario > ANY (SELECT salario FROM empregados WHERE departamento_id = (SELECT departamento_id FROM departamentos WHERE nome = 'TI'));
===============================================//=========================================================
SELECT nome, salario
FROM empregados
WHERE salario > ALL (SELECT salario FROM empregados WHERE departamento_id = 3);
===============================================//=========================================================
ALTER TABLE empregados ADD titulo VARCHAR(50);
===============================================//=========================================================
CREATE TABLE cargos (
cargos_id INT AUTO_INCREMENT PRIMARY KEY,
titulo VARCHAR(50) NOT NULL,
departamento_id INT,
salario DECIMAL(10, 2) NOT NULL,
FOREIGN KEY (departamento_id) REFERENCES departamentos(departamento_id)
);
===============================================//=========================================================
UPDATE empregados SET titulo = 'Gerente' WHERE nome = 'Maicou Diécson';
UPDATE empregados SET titulo = 'Assistente' WHERE nome = 'Neima Juniu';
UPDATE empregados SET titulo = 'Analista' WHERE nome = 'Cristiano Penaldo';
UPDATE empregados SET titulo = 'Desenvolvedor' WHERE nome = 'Dalessandro';
UPDATE empregados SET titulo = 'Engenheiro' WHERE nome = 'Mattos';
UPDATE empregados SET titulo = 'Assistente' WHERE nome = 'Chicoins';
UPDATE empregados SET titulo = 'Analista' WHERE nome = 'Lionel Pessi';
UPDATE empregados SET titulo = 'Estagiário' WHERE nome = 'Biniciu Juniu';
===============================================//=========================================================
INSERT INTO cargos (titulo, departamento_id, salario) VALUES
('Gerente', 1, 8000.00),
('Assistente', 1, 4000.00),
('Analista', 2, 4500.00),
('Desenvolvedor', 3, 6000.00),
('Engenheiro', 3, 7000.00),
('Assistente', 4, 3500.00),
('Analista', 2, 4600.00),
('Estagiário', 1, 2000.00);
===============================================//=========================================================
SELECT departamentos.nome, AVG(cargos.salario)
FROM empregados
JOIN cargos ON empregados.departamento_id = cargos.departamento_id
JOIN departamentos ON empregados.departamento_id = departamentos.departamento_id
GROUP BY departamentos.nome
HAVING AVG(cargos.salario) > 5000.00;
===============================================//=========================================================

===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
===============================================//=========================================================
